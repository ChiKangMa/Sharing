Exercise #1 練習使用範本驅動表單的開發方式

commit 紀錄 https://github.com/coolrare/DCT-112005-advanced/commit/a155305e15b9f1ace3423dfa7a5ce259fd29b4be?fbclid=IwAR1Y8gY3XhLn9RBXb9LJQLM0V3IF0Zun_i6H-TMpJRSDqto8ezK0J7mIdlQ
記得加入 FormsModule
替所有表單位加上 ngModel 以及 name 屬性
使用範本參考變數取得 ngModel 物件實體 (#tEmail="ngModel")
嘗試將 ngModel 物件實體的資料印出來 (tEmail.value)
在 <form> 上使用範本參考變數取得 ngForm 物件實體 (#tForm="ngForm")
嘗試將 ngForm 表單中的值印出來 (<pre>{{ tForm.value | json }}</pre>)

Exercise #2 練習取得表單狀態以及驗證功能

commit 紀錄 https://github.com/coolrare/DCT-112005-advanced/commit/766d07718046b7f33af5fb0172fd23a3d715c9c0?fbclid=IwAR1LRC_4oeLPCrqPKC3EBUeuch1gsUDq7UupytDJdIqxzb7IrfBqGwfcNaM
嘗試在表單控制項中加入驗證條件，如 required, email, minlength
在畫面上呈現表單的各種狀態，如 valid, invalid, untouched, touched, dirty, pristine
使用 hasError 取得指定驗證條件是否未通過，如 tEmail.hasError('required')
使用 getError 取得驗證器提供的錯誤資訊，如 tPassword.getError('minlength')
在表單驗證未通過時，表單送出的按鈕不可以按 [disabled]="tForm.invalid"
嘗試加入 css 改變未通過驗證的欄位樣式 (.ng-invalid:not(form) { border: 1px solid red; })
在 login.component.ts 中取得表單實體 @ViewChild(NgForm) form: NgForm;
在 login.component.ts 中取得表單各種狀態，如 this.form?.invalid

Exercise #3 練習使用 ngModelGroup

commit 紀錄 https://github.com/coolrare/DCT-112005-advanced/commit/edf734e0d1aeed524bae187a5f91966fdfc15e50
簡易版範例 
<div ngModelGroup="profile">
  <input ngModel name="firstName" />
  <input ngModel name="lastName" />
</div>

Exercise #4 練習使用 Model-driven form 建立表單模型，並與畫面上的 input 等繫結

https://github.com/coolrare/DCT-112005-advanced/commit/e2e8672822bd7f49ae2f49a25a4f0c98b7628a0e?fbclid=IwAR1bqBPXDXT274yfeBwqnbziJ6SFTHrFT7oOUHF8cugrnqJkBbIB2QrtYwU
import ReactiveFormsModule
注入 FormBuilder => formBuilder = inject(FormBuilder)
使用 FormBuilder 建立表單群組 form = formBuilder.group({})
表單群組內宣告表單控制項物件
在畫面上使用 <form [formGroup]="form"> 將畫面上的 <form> 標籤和程式中的 form 模型綁定
使用 <input formControlName="firstName"> 將畫面上的 <input> 標籤和 form 模型下的 firstName 綁定
也可以使用 <input [formControl]="form.controls.firstName" >，透過「強型別」的方式將表單控制項 (FormControl) 與 <input> 標籤綁定
在程式中，透過 this.form.value 取得表單模型中的資料模型
取得表單控制項的方法：this.form.get("firstName")，也可以使用 this.form.controls.firstName 的「強型別」方法取得名為 firstName 的表單控制項

Exercise #5 練習使用 FormGroup 和 FormArray 調整表單的模型結構
https://github.com/coolrare/DCT-112005-advanced/commit/bde7145261efbb63d30ac9a71042dde45d7c0a67?fbclid=IwAR3F-OS0yudQUpNYCfOubAm3Dlxd7FWjH2SUNkr70cLUoBsXhYmZG7VM8Yo

目前的表單模型參考
form = this.formBuilder.group({
  firstName: this.formBuilder.control('Mike'),
  lastName: this.formBuilder.control('Huang'),
  email: this.formBuilder.control(''),
  password: this.formBuilder.group({
    password: this.formBuilder.control(''),
    confirmPassword: this.formBuilder.control(''),
  }),
  skills: this.formBuilder.array([
    this.formBuilder.control('HTML'),
    this.formBuilder.control('CSS'),
    this.formBuilder.control('JavaScript'),
    this.formBuilder.control('Angular'),
  ])
});
畫面上綁定巢狀的 FormGroup
<div class="form-group row" [formGroup]="form.controls.password">
  <div class="col-sm-6 mb-3 mb-sm-0">
    <input
      formControlName="password"
      type="password"
      class="form-control form-control-user"
      id="exampleInputPassword"
      placeholder="Password"
    />
  </div>
  <div class="col-sm-6">
    <input
      formControlName="confirmPassword"
      type="password"
      class="form-control form-control-user"
      id="exampleRepeatPassword"
      placeholder="Repeat Password"
      />
    </div>
</div>
畫面上綁定 FormArray
<div class="form-group row" formArrayName="skills">
  <div
    class="col-sm-6 mb-3 mb-sm-0"
    *ngFor="
      let _ of form.controls.skills.controls;
      let index = index
    "
  >
    <!-- form.skills[index] -->
    <input
      [formControlName]="index"
      type="text"
      class="form-control form-control-user"
    />
  </div>
</div>
另一種寫法
<div class="form-group row" formArrayName="skills">
  <div class="col-sm-6 mb-3 mb-sm-0" *ngFor="let control of form.controls.skills.controls">
    <input
      [formControl]="control"
      type="text"
      class="form-control form-control-user"
    />
  </div>
</div>
